services:

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - n1
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  order:
    build: 
      context: Order
      dockerfile: Dockerfile
    container_name: order
    ports:
      - "5000:5000"
    networks:
      - n1
    restart: "no"
    depends_on:
      rabbitmq:
        condition: service_healthy 

    
    #volumes:
    #  - ../Order/app_order:/home/pyuser/code/app_order

  machine:
    build: 
      context: Machine
      dockerfile: Dockerfile
    container_name: machine
    ports:
      - "5001:5001"
    networks:
      - n1
    restart: "no"
    #volumes:
    #  - ../Machine/app_machine:/home/pyuser/code/app_machine

  delivery:
    build:
      context: Delivery
      dockerfile: Dockerfile
    container_name: delivery
    ports:
      - "5002:5002"
    networks:
      - n1
    restart: "no"
    #volumes:
    #  - ../Delivery/app_delivery:/home/pyuser/code/app_delivery
  
  payment:
    build:
      context: Payment
      dockerfile: Dockerfile
    container_name: payment
    ports:
      - "5003:5003"
    networks:
      - n1
    restart: "no"
    depends_on:
      rabbitmq:
        condition: service_healthy 
    #volumes:
    #  - ../Payment/app_payment:/home/pyuser/code/app_payment

  # Servicio de RabbitMQ para mensajer√≠a entre microservicios

  api-gateway:
    image: haproxy:2.9
    container_name: api_gateway
    ports:
      - "80:80"
      - "8404:8404"
    networks:
      - n1
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - order
      - machine
      - delivery
      - payment

networks:
  n1:
    driver: bridge